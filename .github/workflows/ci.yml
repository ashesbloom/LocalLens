name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black

      - name: Lint with flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Check formatting with black
        run: |
          cd backend
          black --check .

      - name: Test with pytest
        run: |
          cd backend
          pytest --cov=. --cov-report=xml

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint
        run: |
          cd frontend
          npm run lint

      - name: Test
        run: |
          cd frontend
          npm test

  build-test:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake libopenblas-dev liblapack-dev
          sudo apt install -y python3-dev python3-venv pkg-config
          sudo apt install -y libwebkit2gtk-4.0-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Python backend
        run: |
          cd backend
          pyinstaller backend_server.spec

      - name: Install Node dependencies
        run: |
          cd frontend
          npm install

      - name: Copy backend to Tauri (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          mkdir -p frontend/src-tauri/binaries
          copy backend/dist/backend_server.exe frontend/src-tauri/binaries/backend_server-x86_64-pc-windows-msvc.exe

      - name: Copy backend to Tauri (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir -p frontend/src-tauri/binaries
          cp backend/dist/backend_server frontend/src-tauri/binaries/backend_server-x86_64-apple-darwin

      - name: Copy backend to Tauri (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mkdir -p frontend/src-tauri/binaries
          cp backend/dist/backend_server frontend/src-tauri/binaries/backend_server-x86_64-unknown-linux-gnu

      - name: Build Tauri app (Debug)
        run: |
          cd frontend
          npm run tauri build -- --debug
