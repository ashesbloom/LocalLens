name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Local Lens ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            ## Local Lens ${{ steps.get_version.outputs.version }}
            
            ### 🔒 Security & Authenticity
            
            This release is built automatically using GitHub Actions with full transparency:
            
            - **Source Code**: All source code is available in this repository
            - **Build Process**: View the complete build log in the [Actions tab](https://github.com/ashesbloom/LocalLens/actions)
            - **Reproducible**: Build using the same workflow on your machine
            - **Checksums**: SHA256 checksums provided for all binaries
            - **Code Signing**: Windows binaries are code-signed for authenticity
            
            ### 📥 Downloads
            
            Choose the appropriate installer for your platform:
            
            - **Windows**: `Local_Lens_${{ steps.get_version.outputs.version }}_x64-setup.exe` or `Local_Lens_${{ steps.get_version.outputs.version }}_x64_en-US.msi`
            - **macOS**: `Local_Lens_${{ steps.get_version.outputs.version }}_x64.dmg`
            - **Linux**: `Local_Lens_${{ steps.get_version.outputs.version }}_amd64.deb` or `Local_Lens_${{ steps.get_version.outputs.version }}_x86_64.AppImage`
            
            ### ✅ Verification
            
            **Verify the integrity of your download:**
            
            1. Download the `checksums.txt` file
            2. Compare the SHA256 hash of your downloaded file with the checksums
            3. On Windows: `certutil -hashfile filename.msi SHA256`
            4. On macOS/Linux: `shasum -a 256 filename.dmg`
            
            **Verify code signature (Windows):**
            
            1. Right-click the installer → Properties → Digital Signatures
            2. Verify the signature is from "Local Lens" or check certificate details
            
            ### 🐛 Known Issues
            
            - None at this time
            
            ### 🤝 Contributing
            
            See our [Contributing Guide](CONTRIBUTING.md) for how to help improve Local Lens.

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Python backend
        run: |
          cd backend
          pyinstaller backend_server.spec

      - name: Install Node dependencies
        run: |
          cd frontend
          npm install

      - name: Copy backend to Tauri
        run: |
          mkdir -p frontend/src-tauri/binaries
          copy backend/dist/backend_server.exe frontend/src-tauri/binaries/backend_server-x86_64-pc-windows-msvc.exe

      - name: Build Tauri app
        env:
          # Add your code signing certificate details here
          # TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          # TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd frontend
          npm run tauri build

      - name: Generate checksums
        run: |
          cd frontend/src-tauri/target/release/bundle
          # Generate SHA256 checksums for all installers
          $files = Get-ChildItem -Recurse -Include "*.msi", "*.exe" | Where-Object { $_.Name -like "*Local?Lens*" }
          $checksums = @()
          foreach ($file in $files) {
            $hash = Get-FileHash -Path $file.FullName -Algorithm SHA256
            $checksums += "$($hash.Hash.ToLower())  $($file.Name)"
          }
          $checksums | Out-File -FilePath "checksums-windows.txt" -Encoding utf8
          Get-Content "checksums-windows.txt"

      - name: Find installer files
        id: find_files
        run: |
          cd frontend/src-tauri/target/release/bundle
          $msiFile = Get-ChildItem -Recurse -Filter "*.msi" | Select-Object -First 1
          $exeFile = Get-ChildItem -Recurse -Filter "*.exe" | Where-Object { $_.Name -like "*setup*" } | Select-Object -First 1
          
          if ($msiFile) {
            echo "msi_path=$($msiFile.FullName)" >> $env:GITHUB_OUTPUT
            echo "msi_name=$($msiFile.Name)" >> $env:GITHUB_OUTPUT
          }
          if ($exeFile) {
            echo "exe_path=$($exeFile.FullName)" >> $env:GITHUB_OUTPUT
            echo "exe_name=$($exeFile.Name)" >> $env:GITHUB_OUTPUT
          }
          
          $checksumFile = "checksums-windows.txt"
          if (Test-Path $checksumFile) {
            echo "checksum_path=$(Resolve-Path $checksumFile)" >> $env:GITHUB_OUTPUT
          }

      - name: Upload MSI installer
        if: steps.find_files.outputs.msi_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.msi_path }}
          asset_name: Local_Lens_${{ needs.create-release.outputs.version }}_x64_en-US.msi
          asset_content_type: application/x-msi

      - name: Upload EXE installer
        if: steps.find_files.outputs.exe_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.exe_path }}
          asset_name: Local_Lens_${{ needs.create-release.outputs.version }}_x64-setup.exe
          asset_content_type: application/x-msdownload

      - name: Upload Windows checksums
        if: steps.find_files.outputs.checksum_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.checksum_path }}
          asset_name: checksums-windows.txt
          asset_content_type: text/plain

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Python backend
        run: |
          cd backend
          pyinstaller backend_server.spec

      - name: Install Node dependencies
        run: |
          cd frontend
          npm install

      - name: Copy backend to Tauri
        run: |
          mkdir -p frontend/src-tauri/binaries
          cp backend/dist/backend_server frontend/src-tauri/binaries/backend_server-x86_64-apple-darwin

      - name: Build Tauri app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Apple notarization (optional)
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          cd frontend
          npm run tauri build

      - name: Generate checksums
        run: |
          cd frontend/src-tauri/target/release/bundle/dmg
          shasum -a 256 *.dmg > checksums-macos.txt
          cat checksums-macos.txt

      - name: Find DMG file
        id: find_dmg
        run: |
          cd frontend/src-tauri/target/release/bundle/dmg
          dmg_file=$(ls *.dmg | head -n 1)
          echo "dmg_path=$(pwd)/$dmg_file" >> $GITHUB_OUTPUT
          echo "dmg_name=$dmg_file" >> $GITHUB_OUTPUT
          echo "checksum_path=$(pwd)/checksums-macos.txt" >> $GITHUB_OUTPUT

      - name: Upload DMG installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_dmg.outputs.dmg_path }}
          asset_name: Local_Lens_${{ needs.create-release.outputs.version }}_x64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload macOS checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_dmg.outputs.checksum_path }}
          asset_name: checksums-macos.txt
          asset_content_type: text/plain

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake libopenblas-dev liblapack-dev
          sudo apt install -y python3-dev python3-venv pkg-config
          sudo apt install -y libwebkit2gtk-4.0-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Python backend
        run: |
          cd backend
          pyinstaller backend_server.spec

      - name: Install Node dependencies
        run: |
          cd frontend
          npm install

      - name: Copy backend to Tauri
        run: |
          mkdir -p frontend/src-tauri/binaries
          cp backend/dist/backend_server frontend/src-tauri/binaries/backend_server-x86_64-unknown-linux-gnu

      - name: Build Tauri app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd frontend
          npm run tauri build

      - name: Generate checksums
        run: |
          cd frontend/src-tauri/target/release/bundle
          find . -name "*.deb" -o -name "*.AppImage" | xargs shasum -a 256 > checksums-linux.txt
          cat checksums-linux.txt

      - name: Find Linux files
        id: find_files
        run: |
          cd frontend/src-tauri/target/release/bundle
          deb_file=$(find . -name "*.deb" | head -n 1)
          appimage_file=$(find . -name "*.AppImage" | head -n 1)
          
          if [ -n "$deb_file" ]; then
            echo "deb_path=$(realpath $deb_file)" >> $GITHUB_OUTPUT
            echo "deb_name=$(basename $deb_file)" >> $GITHUB_OUTPUT
          fi
          if [ -n "$appimage_file" ]; then
            echo "appimage_path=$(realpath $appimage_file)" >> $GITHUB_OUTPUT
            echo "appimage_name=$(basename $appimage_file)" >> $GITHUB_OUTPUT
          fi
          echo "checksum_path=$(pwd)/checksums-linux.txt" >> $GITHUB_OUTPUT

      - name: Upload DEB package
        if: steps.find_files.outputs.deb_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.deb_path }}
          asset_name: Local_Lens_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload AppImage
        if: steps.find_files.outputs.appimage_path
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.appimage_path }}
          asset_name: Local_Lens_${{ needs.create-release.outputs.version }}_x86_64.AppImage
          asset_content_type: application/x-executable

      - name: Upload Linux checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.checksum_path }}
          asset_name: checksums-linux.txt
          asset_content_type: text/plain

  finalize-release:
    needs: [create-release, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Publish Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            });
